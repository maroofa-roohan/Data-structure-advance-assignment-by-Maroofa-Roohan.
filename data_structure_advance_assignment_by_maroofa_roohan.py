# -*- coding: utf-8 -*-
"""Data structure advance assignment by Maroofa Roohan

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LmQMak8OdtYn8mWR5tGfBXUdVhgdmDnP
"""

#Code t reverse a string
def reverse_string(s):
    return s[::-1]

# Example
print(reverse_string("example"))

#Code to count the number of vowels in a string:
def count_vowels(s):
    vowels = 'aeiouAEIOU'
    return sum(1 for char in s if char in vowels)

# Example
print(count_vowels("example string"))

# Check if a Given String is a Palindrome
def is_palindrome(input_string):
    cleaned_string = input_string.lower().replace(" ", "")
    return cleaned_string == cleaned_string[::-1]

# Example
string = "madam"
print(is_palindrome(string))  # Output: True

string = "hello"
print(is_palindrome(string))  # Output: False

#Check if Two Given Strings are Anagrams
def are_anagrams(string1, string2):
    return sorted(string1.replace(" ", "").lower()) == sorted(string2.replace(" ", "").lower())

# Example
string1 = "listen"
string2 = "silent"
print(are_anagrams(string1, string2))  # Output: True

string1 = "hello"
string2 = "world"
print(are_anagrams(string1, string2))  # Output: False

#Find All Occurrences of a Substring within Another String
def find_all_occurrences(main_string, substring):
    occurrences = []
    start = 0
    while True:
        start = main_string.find(substring, start)
        if start == -1:
            break
        occurrences.append(start)
        start += len(substring)  # Move past the last found occurrence
    return occurrences

# Example
main_string = "abracadabra"
substring = "abra"
print(find_all_occurrences(main_string, substring))  # Output: [0, 7]

#Perform Basic String Compression Using Counts of Repeated Characters
def compress_string(input_string):
    compressed = []
    count = 1
    for i in range(1, len(input_string)):
        if input_string[i] == input_string[i-1]:
            count += 1
        else:
            compressed.append(input_string[i-1] + str(count))
            count = 1
    compressed.append(input_string[-1] + str(count))
    compressed_string = ''.join(compressed)
    return compressed_string if len(compressed_string) < len(input_string) else input_string

# Example
string = "aabcccccaaa"
print(compress_string(string))  # Output: a2b1c5a3

#Determine if a String Has All Unique Characters
def has_unique_characters(input_string):
    return len(set(input_string)) == len(input_string)

# Example
string = "abcdef"
print(has_unique_characters(string))  # Output: True

string = "abcdea"
print(has_unique_characters(string))  # Output: False

#Convert a Given String to Uppercase or Lowercase
def convert_case(input_string, to_upper=True):
    if to_upper:
        return input_string.upper()
    else:
        return input_string.lower()

# Example
string = "Hello World"
print(convert_case(string, to_upper=True))  # Output: HELLO WORLD
print(convert_case(string, to_upper=False))  # Output: hello world

# Count the Number of Words in a String
def count_words(input_string):
    return len(input_string.split())

# Example
string = "Hello World this is Python"
print(count_words(string))  # Output: 5

#Concatenate Two Strings Without Using the + Operator
def concatenate_strings(string1, string2):
    return '{}{}'.format(string1, string2)

# Example
string1 = "Hello"
string2 = "World"
print(concatenate_strings(string1, string2))  # Output: HelloWorld

#Remove All Occurrences of a Specific Element from a List
def remove_all_occurrences(lst, element):
    return [item for item in lst if item != element]

# Example
lst = [1, 2, 3, 4, 2, 5, 2]
print(remove_all_occurrences(lst, 2))  # Output: [1, 3, 4, 5]

#Find the Second Largest Number in a List of Integers
def find_second_largest(lst):
    unique_lst = list(set(lst))  # Remove duplicates
    unique_lst.sort(reverse=True)  # Sort in descending order
    return unique_lst[1] if len(unique_lst) > 1 else None

# Example
lst = [5, 1, 8, 7, 2, 8, 7]
print(find_second_largest(lst))  # Output: 7

#Count the Occurrences of Each Element in a List and Return a Dictionary
def count_occurrences(lst):
    count_dict = {}
    for item in lst:
        if item in count_dict:
            count_dict[item] += 1
        else:
            count_dict[item] = 1
    return count_dict

# Example
lst = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']
print(count_occurrences(lst))  # Output: {'apple': 3, 'banana': 2, 'orange': 1}

# Reverse a List In-Place Without Using Any Built-in Reverse Function
def reverse_list(lst):
    left, right = 0, len(lst) - 1
    while left < right:
        lst[left], lst[right] = lst[right], lst[left]
        left += 1
        right -= 1

# Example
lst = [1, 2, 3, 4, 5]
reverse_list(lst)
print(lst)  # Output: [5, 4, 3, 2, 1]

#Find and Remove Duplicates from a List While Preserving the Original Order
def remove_duplicates(lst):
    seen = set()
    result = []
    for item in lst:
        if item not in seen:
            result.append(item)
            seen.add(item)
    return result

# Example
lst = [1, 2, 3, 2, 4, 3, 5]
print(remove_duplicates(lst))  # Output: [1, 2, 3, 4, 5]

# Check if a Given List is Sorted (Either Ascending or Descending)
def is_sorted(lst):
    if lst == sorted(lst):
        return "Ascending"
    elif lst == sorted(lst, reverse=True):
        return "Descending"
    else:
        return "Not sorted"

# Example
lst = [1, 2, 3, 4, 5]
print(is_sorted(lst))  # Output: Ascending

lst = [5, 4, 3, 2, 1]
print(is_sorted(lst))  # Output: Descending

lst = [3, 1, 4, 2]
print(is_sorted(lst))  # Output: Not sorted

#Merge Two Sorted Lists into a Single Sorted List
def merge_sorted_lists(lst1, lst2):
    result = []
    i, j = 0, 0
    while i < len(lst1) and j < len(lst2):
        if lst1[i] < lst2[j]:
            result.append(lst1[i])
            i += 1
        else:
            result.append(lst2[j])
            j += 1
    result.extend(lst1[i:])
    result.extend(lst2[j:])
    return result

# Example
lst1 = [1, 3, 5]
lst2 = [2, 4, 6]
print(merge_sorted_lists(lst1, lst2))  # Output: [1, 2, 3, 4, 5, 6]

# Find the Intersection of Two Given Lists
def intersection(lst1, lst2):
    return list(set(lst1) & set(lst2))

# Example
lst1 = [1, 2, 3, 4]
lst2 = [3, 4, 5, 6]
print(intersection(lst1, lst2))  # Output: [3, 4]

#Find the Union of Two Lists Without Duplicates
def union(lst1, lst2):
    return list(set(lst1) | set(lst2))

# Example
lst1 = [1, 2, 3]
lst2 = [3, 4, 5]
print(union(lst1, lst2))  # Output: [1, 2, 3, 4, 5]

#Shuffle a Given List Randomly Without Using Any Built-in Shuffle Function
import random

def shuffle_list(lst):
    shuffled = lst[:]
    for i in range(len(shuffled)-1, 0, -1):
        j = random.randint(0, i)
        shuffled[i], shuffled[j] = shuffled[j], shuffled[i]
    return shuffled

# Example
lst = [1, 2, 3, 4, 5]
print(shuffle_list(lst))  # Output: A randomly shuffled version of the list, e.g., [3, 1, 4, 5, 2]

# Return a New Tuple Containing Elements Common to Both Input Tuples
def common_elements_in_tuples(tuple1, tuple2):
    return tuple(set(tuple1) & set(tuple2))

# Example
tuple1 = (1, 2, 3, 4)
tuple2 = (3, 4, 5, 6)
print(common_elements_in_tuples(tuple1, tuple2))  # Output: (3, 4)

#Prompt User to Enter Two Sets of Integers Separated by Commas, and Print the Intersection
def prompt_and_find_intersection():
    set1 = set(map(int, input("Enter the first set of integers separated by commas: ").split(',')))
    set2 = set(map(int, input("Enter the second set of integers separated by commas: ").split(',')))
    print(f"Intersection: {set1 & set2}")

# Example
# Input: 1,2,3 for set1 and 2,3,4 for set2
# Output: Intersection: {2, 3}

#Concatenate Two Tuples
def concatenate_tuples(tuple1, tuple2):
    return tuple1 + tuple2

# Example
tuple1 = (1, 2, 3)
tuple2 = (4, 5, 6)
print(concatenate_tuples(tuple1, tuple2))  # Output: (1, 2, 3, 4, 5, 6)

# Prompt User to Input Two Sets of Strings and Print Elements in the First Set but Not in the Second
def prompt_and_find_difference():
    set1 = set(input("Enter the first set of strings separated by commas: ").split(','))
    set2 = set(input("Enter the second set of strings separated by commas: ").split(','))
    print(f"Elements in the first set but not in the second: {set1 - set2}")

# Example
# Input: apple,banana,orange for set1 and banana,grape for set2
# Output: Elements in the first set but not in the second: {'apple', 'orange'}

#Return a New Tuple Containing Elements from the Original Tuple Within a Specified Range of Indices
def slice_tuple_in_range(tpl, start, end):
    return tpl[start:end+1]

# Example
tpl = (10, 20, 30, 40, 50, 60)
start = 1
end = 4
print(slice_tuple_in_range(tpl, start, end))  # Output: (20, 30, 40, 50)

#Prompt the User to Input Two Sets of Characters and Print the Union of These Sets
def prompt_and_find_union():
    set1 = set(input("Enter the first set of characters separated by commas: ").split(','))
    set2 = set(input("Enter the second set of characters separated by commas: ").split(','))
    union = set1 | set2
    print(f"Union of the two sets: {union}")

# Example:
# Input:
# Enter the first set of characters separated by commas: a,b,c
# Enter the second set of characters separated by commas: b,c,d
# Output: Union of the two sets: {'a', 'b', 'c', 'd'}

#Function That Takes a Tuple of Integers and Returns the Maximum and Minimum Values Using Tuple Unpacking
def find_max_min(tpl):
    max_value, min_value = max(tpl), min(tpl)
    return max_value, min_value

# Example:
tpl = (3, 5, 7, 2, 8)
max_val, min_val = find_max_min(tpl)
print(f"Maximum: {max_val}, Minimum: {min_val}")
# Output: Maximum: 8, Minimum: 2

#Define Two Sets of Integers, Then Print the Union, Intersection, and Difference of These Sets
def set_operations():
    set1 = {1, 2, 3, 4}
    set2 = {3, 4, 5, 6}

    union = set1 | set2
    intersection = set1 & set2
    difference = set1 - set2

    print(f"Union: {union}")
    print(f"Intersection: {intersection}")
    print(f"Difference (set1 - set2): {difference}")

# Example:
set_operations()
# Output:
# Union: {1, 2, 3, 4, 5, 6}
# Intersection: {3, 4}
# Difference (set1 - set2): {1, 2}

#Function That Takes a Tuple and an Element as Input and Returns the Count of Occurrences of the Element in the Tuple
def count_element_in_tuple(tpl, element):
    return tpl.count(element)

# Example:
tpl = (1, 2, 3, 1, 4, 1)
element = 1
print(f"Element {element} occurs {count_element_in_tuple(tpl, element)} times in the tuple.")
# Output: Element 1 occurs 3 times in the tuple.

#Prompt the User to Input Two Sets of Strings and Print the Symmetric Difference of These Sets
def prompt_and_find_symmetric_difference():
    set1 = set(input("Enter the first set of strings separated by commas: ").split(','))
    set2 = set(input("Enter the second set of strings separated by commas: ").split(','))
    symmetric_difference = set1 ^ set2
    print(f"Symmetric Difference: {symmetric_difference}")

# Example:
# Input:
# Enter the first set of strings separated by commas: apple,banana,grape
# Enter the second set of strings separated by commas: banana,grape,orange
# Output: Symmetric Difference: {'apple', 'orange'}

#Function to Take a List of Words and Return a Dictionary with Unique Words and Their Frequencies
def word_frequencies(words):
    freq_dict = {}
    for word in words:
        freq_dict[word] = freq_dict.get(word, 0) + 1
    return freq_dict

# Example:
words_list = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']
print(word_frequencies(words_list))
# Output: {'apple': 3, 'banana': 2, 'orange': 1}

#Function to Merge Two Dictionaries and Add Values of Common Keys
def merge_dictionaries(dict1, dict2):
    merged_dict = dict1.copy()  # Start with a copy of dict1
    for key, value in dict2.items():
        if key in merged_dict:
            merged_dict[key] += value  # Add values of common keys
        else:
            merged_dict[key] = value  # Add new keys from dict2
    return merged_dict

# Example:
dict1 = {'a': 100, 'b': 200, 'c': 300}
dict2 = {'b': 150, 'c': 100, 'd': 400}
print(merge_dictionaries(dict1, dict2))
# Output: {'a': 100, 'b': 350, 'c': 400, 'd': 400}

#Function to Access a Value in a Nested Dictionary
def access_nested_dict(nested_dict, keys_list):
    current_value = nested_dict
    for key in keys_list:
        if key in current_value:
            current_value = current_value[key]
        else:
            return None  # If any key is not found
    return current_value

# Example:
nested_dict = {'a': {'b': {'c': 42}}}
keys_list = ['a', 'b', 'c']
print(access_nested_dict(nested_dict, keys_list))  # Output: 42

keys_list = ['a', 'b', 'd']
print(access_nested_dict(nested_dict, keys_list))  # Output: None

#Function to Return a Sorted Version of a Dictionary Based on Values
def sort_dict_by_values(d, ascending=True):
    return dict(sorted(d.items(), key=lambda item: item[1], reverse=not ascending))

# Example:
d = {'apple': 5, 'banana': 2, 'orange': 10}
print(sort_dict_by_values(d, ascending=True))  # Output: {'banana': 2, 'apple': 5, 'orange': 10}
print(sort_dict_by_values(d, ascending=False))  # Output: {'orange': 10, 'apple': 5, 'banana': 2}

#Function to Invert a Dictionary by Swapping Keys and Values
def invert_dict(d):
    inverted_dict = {}
    for key, value in d.items():
        if value in inverted_dict:
            inverted_dict[value].append(key)  # Handle multiple keys with the same value
        else:
            inverted_dict[value] = [key]
    return inverted_dict

# Example:
d = {'a': 1, 'b': 2, 'c': 1}
print(invert_dict(d))
# Output: {1: ['a', 'c'], 2: ['b']}

